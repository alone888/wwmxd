# 1 "./hpribin4bit.va"











# 1 "disciplines.vams"






# 9 "disciplines.vams"




discipline logic
  domain discrete;
enddiscipline






nature Current
  units = "A";
  access = I;
  idt_nature = Charge;
# 29 "disciplines.vams"
  abstol = 1e-12;

endnature

nature Charge
  units = "coul";
  access = Q;
  ddt_nature = Current;
# 40 "disciplines.vams"
  abstol = 1e-14;

endnature

nature Voltage
  units = "V";
  access = V;
  idt_nature = Flux;
# 51 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Flux
  units = "Wb";
  access = Phi;
  ddt_nature = Voltage;
# 62 "disciplines.vams"
  abstol = 1e-9;

endnature

discipline electrical
  potential Voltage;
  flow Current;
enddiscipline

discipline voltage
  potential Voltage;
enddiscipline
discipline current
  potential Current;
enddiscipline


nature Magneto_Motive_Force
  units = "A*turn";
  access = MMF;
# 85 "disciplines.vams"
  abstol = 1e-12;

endnature

discipline magnetic
  potential Magneto_Motive_Force;
  flow Flux;
enddiscipline


nature Temperature
  units = "K";
  access = Temp;
# 101 "disciplines.vams"
  abstol = 1e-4;

endnature

nature Power
  units = "W";
  access = Pwr;
# 111 "disciplines.vams"
  abstol = 1e-9;

endnature

discipline thermal
  potential Temperature;
  flow Power;
enddiscipline


nature Position
  units = "m";
  access = Pos;
  ddt_nature = Velocity;
# 128 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Velocity
  units = "m/s";
  access = Vel;
  ddt_nature = Acceleration;
  idt_nature = Position;
# 140 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Acceleration
  units = "m/s^2";
  access = Acc;
  ddt_nature = Impulse;
  idt_nature = Velocity;
# 152 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Impulse
  units = "m/s^3";
  access = Imp;
  idt_nature = Acceleration;
# 163 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Force
  units = "N";
  access = F;
# 173 "disciplines.vams"
  abstol = 1e-6;

endnature

discipline kinematic
  potential Position;
  flow Force;
enddiscipline
discipline kinematic_v
  potential Velocity;
  flow Force;
enddiscipline


nature Angle
  units = "rads";
  access = Theta;
  ddt_nature = Angular_Velocity;
# 194 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Velocity
  units = "rads/s";
  access = Omega;
  ddt_nature = Angular_Acceleration;
  idt_nature = Angle;
# 206 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Acceleration
  units = "rads/s^2";
  access = Alpha;
  idt_nature = Angular_Velocity;
# 217 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Force
  units = "N*m";
  access = Tau;
# 227 "disciplines.vams"
  abstol = 1e-6;

endnature

discipline rotational
  potential Angle;
  flow Angular_Force;
enddiscipline
discipline rotational_omega
  potential Angular_Velocity;
  flow Angular_Force;
enddiscipline


# 13 "./hpribin4bit.va"
# 1 "constants.vams"







# 10 "constants.vams"


































# 14 "./hpribin4bit.va"
module hpribin4bit (A, B, C, D, V, Y, X);
 inout  A, B, C, D, V, Y, X;
 electrical  A, B, C, D, V, Y, X;
 electrical Xn1, Xn2, Yn1, Yn2, Vn1, Vn2;


 parameter real TR=6 from [1.0:20.0]  (*info="transfer function scaling factor"*);
 parameter real Delay = 1e-9 from [0: inf]  (*info="output delay" unit="s"*);

 real Rd, Cd;
 real mX, mY, mV;

analog begin
@(initial_model)
  begin
    Rd = 1e3;
    Cd= Delay*1.43/Rd;
  end

mX = V(D)+V(C);
mY = V(D)+(1-V(C))*V(B);
mV = V(D)+V(C)+V(B)+V(A);
I(Xn1) <+ -0.5*(1+tanh(TR*(mX-0.5)));
I(Xn1) <+ V(Xn1);
I(Xn1, Xn2) <+ V(Xn1,Xn2)/Rd;
I(Xn2) <+ ddt(Cd*V(Xn2));
I(X)  <+ -V(Xn2);
I(X) <+ V(X);

I(Yn1) <+ -0.5*(1+tanh(TR*(mY-0.5)));
I(Yn1) <+ V(Yn1);
I(Yn1, Yn2) <+ V(Yn1,Yn2)/Rd;
I(Yn2) <+ ddt(Cd*V(Yn2));
I(Y)  <+ -V(Yn2);
I(Y) <+ V(Y);

I(Vn1) <+ -0.5*(1+tanh(TR*(mV-0.5)));
I(Vn1) <+ V(Vn1);
I(Vn1, Vn2) <+ V(Vn1,Vn2)/Rd;
I(Vn2) <+ ddt(Cd*V(Vn2));
I(V)  <+ -V(Vn2);
I(V) <+ V(V);

end
endmodule
