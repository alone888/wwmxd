# 1 "./fa2b.va"











# 1 "disciplines.vams"






# 9 "disciplines.vams"




discipline logic
  domain discrete;
enddiscipline






nature Current
  units = "A";
  access = I;
  idt_nature = Charge;
# 29 "disciplines.vams"
  abstol = 1e-12;

endnature

nature Charge
  units = "coul";
  access = Q;
  ddt_nature = Current;
# 40 "disciplines.vams"
  abstol = 1e-14;

endnature

nature Voltage
  units = "V";
  access = V;
  idt_nature = Flux;
# 51 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Flux
  units = "Wb";
  access = Phi;
  ddt_nature = Voltage;
# 62 "disciplines.vams"
  abstol = 1e-9;

endnature

discipline electrical
  potential Voltage;
  flow Current;
enddiscipline

discipline voltage
  potential Voltage;
enddiscipline
discipline current
  potential Current;
enddiscipline


nature Magneto_Motive_Force
  units = "A*turn";
  access = MMF;
# 85 "disciplines.vams"
  abstol = 1e-12;

endnature

discipline magnetic
  potential Magneto_Motive_Force;
  flow Flux;
enddiscipline


nature Temperature
  units = "K";
  access = Temp;
# 101 "disciplines.vams"
  abstol = 1e-4;

endnature

nature Power
  units = "W";
  access = Pwr;
# 111 "disciplines.vams"
  abstol = 1e-9;

endnature

discipline thermal
  potential Temperature;
  flow Power;
enddiscipline


nature Position
  units = "m";
  access = Pos;
  ddt_nature = Velocity;
# 128 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Velocity
  units = "m/s";
  access = Vel;
  ddt_nature = Acceleration;
  idt_nature = Position;
# 140 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Acceleration
  units = "m/s^2";
  access = Acc;
  ddt_nature = Impulse;
  idt_nature = Velocity;
# 152 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Impulse
  units = "m/s^3";
  access = Imp;
  idt_nature = Acceleration;
# 163 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Force
  units = "N";
  access = F;
# 173 "disciplines.vams"
  abstol = 1e-6;

endnature

discipline kinematic
  potential Position;
  flow Force;
enddiscipline
discipline kinematic_v
  potential Velocity;
  flow Force;
enddiscipline


nature Angle
  units = "rads";
  access = Theta;
  ddt_nature = Angular_Velocity;
# 194 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Velocity
  units = "rads/s";
  access = Omega;
  ddt_nature = Angular_Acceleration;
  idt_nature = Angle;
# 206 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Acceleration
  units = "rads/s^2";
  access = Alpha;
  idt_nature = Angular_Velocity;
# 217 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Force
  units = "N*m";
  access = Tau;
# 227 "disciplines.vams"
  abstol = 1e-6;

endnature

discipline rotational
  potential Angle;
  flow Angular_Force;
enddiscipline
discipline rotational_omega
  potential Angular_Velocity;
  flow Angular_Force;
enddiscipline


# 13 "./fa2b.va"
# 1 "constants.vams"







# 10 "constants.vams"


































# 14 "./fa2b.va"
module fa2b (D, C, B, A, CI, CO, S1, S0); 
 inout D, C, B, A, CI, CO, S1, S0;
 electrical D, C, B, A, CI, CO, S1, S0;
 electrical S0n1, S0n2, S1n1, S1n2, COn1, COn2;


 parameter real TR=6 from [1.0:20.0]  (*info="transfer function high scaling factor"*);
 parameter real Delay = 1e-9 from [0: inf]  (*info="output delay" unit="s"*);

 real Rd, Cd, mS0a, mS0b, mS0, mS1a, mS1b, mS1, mCO;

analog begin
@(initial_model)
  begin
    Rd = 1e3;
    Cd= Delay*1.43/Rd;
  end

mS0a = V(B)*(1-V(D))+(1-V(B))*V(D);
mS0  = V(CI)*(1-mS0a)+(1-V(CI))*mS0a;
mS1a = V(B)*V(D)+V(CI)*V(B)+V(CI)*V(D);
mS1b = V(A)*(1-V(C))+(1-V(A))*V(C);
mS1  = mS1a*(1-mS1b)+(1-mS1a)*mS1b;
mCO  = V(A)*V(C)+(V(A)+V(C))*mS1a;

if (mS0 >= 0.5) mS0 = 1; else mS0 = 0;
if (mS1 >= 0.5) mS1 = 1; else mS1 = 0;
if (mCO >= 0.5) mCO = 1; else mCO = 0;
I(S0n1) <+ -0.5*(1+tanh(TR*(mS0-0.5)));
I(S0n1) <+ V(S0n1);
I(S0n1, S0n2) <+ V(S0n1,S0n2)/Rd;
I(S0n2) <+ ddt(Cd*V(S0n2));
I(S0)  <+ -V(S0n2);
I(S0) <+ V(S0);

I(S1n1) <+ -0.5*(1+tanh(TR*(mS1-0.5)));
I(S1n1) <+ V(S1n1);
I(S1n1, S1n2) <+ V(S1n1,S1n2)/Rd;
I(S1n2) <+ ddt(Cd*V(S1n2));
I(S1)  <+ -V(S1n2);
I(S1) <+ V(S1);

I(COn1) <+ -0.5*(1+tanh(TR*(mCO-0.5)));
I(COn1) <+ V(COn1);
I(COn1, COn2) <+ V(COn1,COn2)/Rd;
I(COn2) <+ ddt(Cd*V(COn2));
I(CO)  <+ -V(COn2);
I(CO) <+ V(CO);
end
endmodule
