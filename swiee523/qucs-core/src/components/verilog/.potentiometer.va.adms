# 1 "./potentiometer.va"
















# 1 "disciplines.vams"






# 9 "disciplines.vams"




discipline logic
  domain discrete;
enddiscipline






nature Current
  units = "A";
  access = I;
  idt_nature = Charge;
# 29 "disciplines.vams"
  abstol = 1e-12;

endnature

nature Charge
  units = "coul";
  access = Q;
  ddt_nature = Current;
# 40 "disciplines.vams"
  abstol = 1e-14;

endnature

nature Voltage
  units = "V";
  access = V;
  idt_nature = Flux;
# 51 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Flux
  units = "Wb";
  access = Phi;
  ddt_nature = Voltage;
# 62 "disciplines.vams"
  abstol = 1e-9;

endnature

discipline electrical
  potential Voltage;
  flow Current;
enddiscipline

discipline voltage
  potential Voltage;
enddiscipline
discipline current
  potential Current;
enddiscipline


nature Magneto_Motive_Force
  units = "A*turn";
  access = MMF;
# 85 "disciplines.vams"
  abstol = 1e-12;

endnature

discipline magnetic
  potential Magneto_Motive_Force;
  flow Flux;
enddiscipline


nature Temperature
  units = "K";
  access = Temp;
# 101 "disciplines.vams"
  abstol = 1e-4;

endnature

nature Power
  units = "W";
  access = Pwr;
# 111 "disciplines.vams"
  abstol = 1e-9;

endnature

discipline thermal
  potential Temperature;
  flow Power;
enddiscipline


nature Position
  units = "m";
  access = Pos;
  ddt_nature = Velocity;
# 128 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Velocity
  units = "m/s";
  access = Vel;
  ddt_nature = Acceleration;
  idt_nature = Position;
# 140 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Acceleration
  units = "m/s^2";
  access = Acc;
  ddt_nature = Impulse;
  idt_nature = Velocity;
# 152 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Impulse
  units = "m/s^3";
  access = Imp;
  idt_nature = Acceleration;
# 163 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Force
  units = "N";
  access = F;
# 173 "disciplines.vams"
  abstol = 1e-6;

endnature

discipline kinematic
  potential Position;
  flow Force;
enddiscipline
discipline kinematic_v
  potential Velocity;
  flow Force;
enddiscipline


nature Angle
  units = "rads";
  access = Theta;
  ddt_nature = Angular_Velocity;
# 194 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Velocity
  units = "rads/s";
  access = Omega;
  ddt_nature = Angular_Acceleration;
  idt_nature = Angle;
# 206 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Acceleration
  units = "rads/s^2";
  access = Alpha;
  idt_nature = Angular_Velocity;
# 217 "disciplines.vams"
  abstol = 1e-6;

endnature

nature Angular_Force
  units = "N*m";
  access = Tau;
# 227 "disciplines.vams"
  abstol = 1e-6;

endnature

discipline rotational
  potential Angle;
  flow Angular_Force;
enddiscipline
discipline rotational_omega
  potential Angular_Velocity;
  flow Angular_Force;
enddiscipline


# 18 "./potentiometer.va"
# 1 "constants.vams"







# 10 "constants.vams"


































# 19 "./potentiometer.va"

 module potentiometer (B, M, T);
 inout B, M, T;

 electrical B, M, T;



 electrical n1;




 parameter real R_pot = 1e4 from [1e-6 : inf]
   (*info="nominal device resistance" unit = "Ohm"*);
 parameter real Rotation = 120 from [0 : inf]
   (*info="shaft/wiper arm rotation" unit = "degrees"*);
 parameter real Taper_Coeff = 0 from [0 : inf]
   (*info="resistive law taper coefficient" *);
 parameter integer LEVEL = 1 from [1 : 3]
   (*info="device type selector" *);
 parameter real Max_Rotation = 240.0 from [0 : inf]
   (*info="maximum shaft/wiper rotation" unit = "degrees"*);
 parameter real Conformity = 0.2 from [-inf : inf]
   (*info="conformity error" unit = "%"*);
 parameter real Linearity = 0.2 from [-inf : inf]
   (*info="linearity error" unit = "%"*);
 parameter real Contact_Res = 1 from [1e-6 : inf]
   (*info="wiper arm contact resistance" unit = "Ohm"*);
 parameter real Temp_Coeff = 100 from [0 : inf]
   (*info="resistance temperature coefficient" unit = "PPM/Celsius"*);
 parameter real Tnom = 26.85 from [-273 : inf]
   (*info="parameter measurement temperature" unit = "Celsius"*);

real Rad_Angle, R_pot_Temp, Rtop, Rbot, Tpcoeff, Rcontact;
real RTB, RTT, error_term;
real fourkt;

analog begin




Rcontact=Contact_Res+1e-6;
Rad_Angle=Rotation* 3.14159265358979323846/180;
R_pot_Temp=(R_pot+1e-6)*(1+Temp_Coeff*($temperature-Tnom)/1e6);
Tpcoeff=Taper_Coeff+(Conformity+Linearity*sin(Rad_Angle))/100;
error_term=(1+(Conformity+Linearity*sin(Rad_Angle))/100);

case (LEVEL)
   2: begin
	RTB=R_pot_Temp*Tpcoeff;
	RTT=1e15;
        Rtop=(1.000001-(Rotation/(Max_Rotation+1e-20)))*R_pot_Temp;
        Rbot=(0.000001+(Rotation/(Max_Rotation+1e-20)))*R_pot_Temp;
      end
   3: begin
	RTB=1e15;
	RTT=R_pot_Temp*Tpcoeff;
        Rtop=(1.000001-(Rotation/(Max_Rotation+1e-20)))*R_pot_Temp;
        Rbot=(0.000001+(Rotation/(Max_Rotation+1e-20)))*R_pot_Temp;

      end
  default:begin
        RTB=1e15;
        RTT=1e15;
        Rtop=(1.000001-(Rotation/(Max_Rotation+1e-20)))*R_pot_Temp*error_term;
        Rbot=(0.000001+(Rotation/(Max_Rotation+1e-20)))*R_pot_Temp*error_term;

      end
endcase

if (Taper_Coeff == 0.0) begin 
			 RTB=1e15;
			 RTT=1e15;
                         Rtop=(1.000001-(Rotation/(Max_Rotation+1e-20)))*R_pot_Temp*error_term;
                         Rbot=(0.000001+(Rotation/(Max_Rotation+1e-20)))*R_pot_Temp*error_term;
			end



I(T, n1) <+ V(T, n1)/Rtop;
I(T, n1) <+ V(T, n1)/RTT;
I(B, n1) <+ V(B, n1)/Rbot;
I(B, n1) <+ V(B, n1)/RTB;
I(M, n1) <+ V(M, n1)/Rcontact;



fourkt=4.0* 1.3806503e-23*$temperature;
I(T, n1) <+ white_noise(fourkt/Rtop, "thermal");
I(T, n1) <+ white_noise(fourkt/RTT, "thermal");
I(B, n1) <+ white_noise(fourkt/Rbot, "thermal");
I(B, n1) <+ white_noise(fourkt/RTB, "thermal");
I(M, n1) <+ white_noise(fourkt/Rcontact, "thermal");


end
endmodule
